/**************************************************************************
 * CODE POUR ELEVE 3 (Modifié)
 * - Capteurs Locaux: GPS Ultimate (UART2 HW), Lux VEML7700 (I2C)
 * - Actionneur Local: Bande LEDs WS2813 (GPIO 23) contrôlée par Lux
 * - Affichage: LCD RGB I2C
 * - Communication:
 *   - Envoie Lux/GPS à E1 via UART1 (Pins 26, 25)
 *   - Envoie Lux/GPS à E2 via UART0 (Pins 15, 13)
 *   - Moniteur Série USB FONCTIONNEL pour le debug
 **************************************************************************/

#include <HardwareSerial.h>    // Pour Serial0 et Serial1 custom
#include <TinyGPSPlus.h>       // Bibliothèque pour parser les données GPS
#include <Wire.h>              // Bibliothèque pour la communication I2C
#include "rgb_lcd.h"           // Bibliothèque pour l'écran LCD RGB
#include "DFRobot_VEML7700.h" // Bibliothèque pour le capteur de lumière VEML7700
#include <FastLED.h>           // Bibliothèque pour contrôler les LEDs

// --- Configuration ---
// Pins GPS (UART2 Hardware)
#define GPS_RX_PIN 16
#define GPS_TX_PIN 17
#define GPS_BAUD 9600

// Pins Communication INTER-ESP
#define E3_TX_TO_E1_PIN   25 // UART1 TX --> E1 RX1 (33)
#define E3_RX_FROM_E1_PIN 26 // UART1 RX <-- E1 TX1 (32)
#define E3_TX_TO_E2_PIN   13 // UART0 TX --> E2 RX2 (18)
#define E3_RX_FROM_E2_PIN 15 // UART0 RX <-- E2 TX2 (19)

// Configuration des LEDs
#define LED_DATA_PIN 23      // Broche de données pour les LEDs WS2813
#define NUM_LEDS 30          // Nombre total de LEDs dans la bande
#define LED_TYPE WS2813      // Type de LED (selon votre bande)
#define COLOR_ORDER RGB      // Ordre des couleurs (RGB ou GRB, etc.)

// Seuil de luminosité pour allumer les LEDs
#define LUMINOSITY_THRESHOLD 50.0  // en lux (à ajuster)

// Intervalle d'envoi des données aux autres ESP
#define SEND_INTERVAL 2000 // Envoyer données toutes les 2 secondes

// --- Objets Globaux ---
TinyGPSPlus gps;
HardwareSerial gpsSerial(2);     // GPS utilise UART2 Hardware intégré
HardwareSerial Serial_E1(1);     // UART1 (mappé) pour comm avec E1
HardwareSerial Serial_E2(0);     // UART0 (mappé) pour comm avec E2
rgb_lcd lcd;                // Ecran LCD I2C
DFRobot_VEML7700 als;       // Capteur lumière I2C
CRGB leds[NUM_LEDS];        // Tableau pour les LEDs FastLED

// --- Variables Globales ---
float current_lux = -1.0;
float current_lat = 0.0;
float current_lon = 0.0;
bool  current_fix = false;
unsigned long lastSend = 0;
bool leds_on_state = false; // Pour suivre l'état actuel des LEDs

// --- Prototypes ---
void setupSensors();
void setupLCD();
void setupLEDs(); // Nouveau
void setupUARTs();
void readSensors();
void controlLEDs(); // Nouveau
void sendDataToPeers();
void displayDataLCD();
void checkIncomingMessages();

// =========================================================================
// SETUP
// =========================================================================
void setup() {
    Serial.begin(115200); // Moniteur série USB pour E3 (OK)
    Serial.println("E3: Démarrage...");

    Wire.begin(); // Pour le capteur de lumière et LCD I2C

    setupSensors();
    setupLCD();
    setupLEDs();  // Initialisation des LEDs
    setupUARTs(); // Initialise UART0 et UART1 pour envoyer à E1/E2

    lcd.print("E3 Initialise...");
    delay(1000);
    lcd.clear();
    Serial.println("E3: Initialisation terminee.");
}

// =========================================================================
// LOOP
// =========================================================================
void loop() {
    unsigned long currentMillis = millis();

    // Lire les capteurs GPS et Lumière en continu
    readSensors();

    // Contrôler les LEDs en fonction de la luminosité
    controlLEDs();

    // Afficher sur l'écran LCD local (alternance gérée dans la fonction)
    displayDataLCD();

    // Vérifier messages entrants (non bloquant)
    checkIncomingMessages();

    // Envoyer les données aux autres ESP périodiquement
    if (currentMillis - lastSend >= SEND_INTERVAL) {
        lastSend = currentMillis;
        sendDataToPeers();
    }

    // Permettre au GPS de traiter les données en arrière plan
    while (gpsSerial.available() > 0) {
       if (gps.encode(gpsSerial.read())) {
           // Action si nouvelle phrase GPS reçue
       }
    }
    delay(5); // Petit délai
}

// =========================================================================
// FONCTIONS D'INITIALISATION
// =========================================================================
void setupSensors() {
    gpsSerial.begin(GPS_BAUD, SERIAL_8N1, GPS_RX_PIN, GPS_TX_PIN);
    Serial.println("E3: GPS Serial (UART2 HW) initialisé sur RX=" + String(GPS_RX_PIN) + ", TX=" + String(GPS_TX_PIN));
    if (als.begin()) {
        Serial.println("E3: Capteur VEML7700 initialisé.");
    } else {
        Serial.println("E3 ERREUR: VEML7700 non trouvé !");
    }
}

void setupLCD() {
    lcd.begin(16, 2);
    lcd.setRGB(0, 128, 128);
    Serial.println("E3: LCD initialisé.");
}

void setupLEDs() {
    FastLED.addLeds<LED_TYPE, LED_DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
    FastLED.setBrightness(80); // Limiter la luminosité max (0-255)
    FastLED.clear();  // Assurer que les LEDs sont éteintes
    FastLED.show();
    Serial.println("E3: LEDs initialisées sur pin " + String(LED_DATA_PIN));
}

void setupUARTs() {
    Serial_E1.begin(115200, SERIAL_8N1, E3_RX_FROM_E1_PIN, E3_TX_TO_E1_PIN);
    Serial.println("E3: UART1 (vers/depuis E1) initialisé sur RX=" + String(E3_RX_FROM_E1_PIN) + ", TX=" + String(E3_TX_TO_E1_PIN));
    Serial_E2.begin(115200, SERIAL_8N1, E3_RX_FROM_E2_PIN, E3_TX_TO_E2_PIN);
    Serial.println("E3: UART0 (vers/depuis E2) initialisé sur RX=" + String(E3_RX_FROM_E2_PIN) + ", TX=" + String(E3_TX_TO_E2_PIN));
    delay(100);
}

// =========================================================================
// FONCTIONS DE LECTURE, CONTROLE, ENVOI, AFFICHAGE
// =========================================================================
void readSensors() {
    if (als.getALSLux(current_lux) != 0) {
       // Serial.println("E3: Erreur lecture Lux"); // Garder l'ancienne valeur
    }

    if (gps.location.isUpdated()) {
        current_fix = gps.location.isValid();
        if(current_fix){
           current_lat = gps.location.lat();
           current_lon = gps.location.lng();
        }
    }
    // Mise à jour du statut fix
    if (millis() > 5000 && gps.charsProcessed() < 10) { current_fix = false; }
    else { current_fix = gps.location.isValid(); }
}

void controlLEDs() {
    // Vérifier si la luminosité est valide avant de prendre une décision
    if (current_lux < 0) {
        // Si erreur de lecture Lux, ne rien changer ou éteindre par sécurité?
        // Pour l'instant, on ne change pas l'état.
        return;
    }

    // Si la luminosité est faible et que les LEDs sont éteintes
    if (current_lux < LUMINOSITY_THRESHOLD && !leds_on_state) {
        Serial.println("Luminosité faible -> Allumage LEDs");
        // Configurer le pattern rouge, bleu, vert
        for (int i = 0; i < NUM_LEDS; i++) {
            switch (i % 3) {
                case 0: leds[i] = CRGB::Red; break;
                case 1: leds[i] = CRGB::Blue; break;
                case 2: leds[i] = CRGB::Green; break;
            }
        }
        FastLED.show();
        leds_on_state = true; // Mémoriser l'état
    }
    // Si la luminosité est suffisante et que les LEDs sont allumées
    else if (current_lux >= LUMINOSITY_THRESHOLD && leds_on_state) {
        Serial.println("Luminosité suffisante -> Extinction LEDs");
        FastLED.clear();
        FastLED.show();
        leds_on_state = false; // Mémoriser l'état
    }
    // Sinon (luminosité faible et LEDs déjà allumées, ou luminosité forte et LEDs déjà éteintes), ne rien faire.
}

void sendDataToPeers() {
    String dataToSend = "E3:LUX=" + String(current_lux, 0);
    dataToSend += ",LAT=" + String(current_lat, 6);
    dataToSend += ",LON=" + String(current_lon, 6);
    dataToSend += ",FIX=" + String(current_fix ? 1 : 0);

    Serial_E1.println(dataToSend);
    Serial_E2.println(dataToSend);

    Serial.println("E3: Envoyé aux pairs: " + dataToSend);
}

// Affichage LCD alterné
unsigned long lastLcdUpdate = 0;
bool showGps = true;
#define LCD_UPDATE_INTERVAL 3000 // Changer toutes les 3 secondes

void displayDataLCD() {
     unsigned long currentMillis = millis();
     if (currentMillis - lastLcdUpdate > LCD_UPDATE_INTERVAL) {
         lastLcdUpdate = currentMillis;
         showGps = !showGps;
         lcd.clear();

         if (showGps) {
             lcd.setCursor(0, 0);
             if (current_fix) {
                 lcd.print("Lat:"); lcd.print(current_lat, 4);
                 lcd.setCursor(0, 1);
                 lcd.print("Lon:"); lcd.print(current_lon, 4);
             } else {
                 lcd.print("GPS: Recherche");
                 lcd.setCursor(0, 1);
                 lcd.print("Sat:"); lcd.print(gps.satellites.value());
             }
         } else {
             lcd.setCursor(0, 0);
             lcd.print("Lumiere (Lux)");
             lcd.setCursor(0, 1);
             if (current_lux < 0) lcd.print("Erreur Lux");
             else lcd.print(current_lux, 0);
             // Optionnel: ajouter l'état des LEDs?
             // lcd.print(leds_on_state ? " LED ON" : " LED OFF");
         }
     }
}

// Lire les messages entrants
void checkIncomingMessages() {
    String msg;
    if (Serial_E1.available()) {
        msg = Serial_E1.readStringUntil('\n');
        msg.trim();
        Serial.println("E3: Reçu de E1 (UART1): " + msg);
    }
    if (Serial_E2.available()) {
        msg = Serial_E2.readStringUntil('\n');
        msg.trim();
        Serial.println("E3: Reçu de E2 (UART0): " + msg);
    }
}
