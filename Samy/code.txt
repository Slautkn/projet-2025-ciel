#include <WiFi.h>
#include <WebServer.h>
#include <Wire.h>

// Paramètres de configuration
const char* ssid = "ESP32-Sensors";
const char* password = "12345678";

// Pins de configuration
const int buttonPin = 26;
const int ledPin = 14;
const int potPin = 4;  // Repasser au pin 4 comme demandé
const int srf02Address = 0x70;  // Adresse I2C typique du capteur SRF02

// Création du serveur web
WebServer server(80);

// Variables globales pour stocker les états des capteurs
int lastButtonState = HIGH;
int ledState = LOW;
int potValue = 0;
int distance = 0;

void setup() {
  // Initialisation des pins
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT);
  
  // Configuration du potentiomètre
  pinMode(potPin, INPUT);

  // Configuration de l'ADC
  analogReadResolution(10);  // Configurer la résolution à 10 bits (0-1023)
  
  // Configuration de l'atténuation pour une plage de lecture plus large
  analogSetAttenuation(ADC_0db);  // Atténuation par défaut

  // Initialisation de la communication série
  Serial.begin(115200);

  // Initialisation de la communication I2C
  Wire.begin();

  // Configuration du point d'accès WiFi
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("Adresse IP du point d'accès : ");
  Serial.println(IP);

  // Configuration des routes du serveur web
  server.on("/", handleRoot);
  server.on("/toggle-led", handleToggleLED);
  server.on("/sensor-data", handleSensorData);

  // Démarrage du serveur
  server.begin();
  Serial.println("Serveur web démarré");
}

void loop() {
  // Gestion des requêtes client
  server.handleClient();

  // Mise à jour des valeurs de capteurs
  updateSensorValues();

  // Petite pause pour stabiliser les lectures
  delay(100);
}

void updateSensorValues() {
  // Lecture de l'état du bouton
  int currentButtonState = digitalRead(buttonPin);
  
  // Vérification du changement d'état du bouton
  if (currentButtonState == LOW && lastButtonState == HIGH) {
    // Bouton appuyé, basculer l'état de la LED
    ledState = !ledState;
    digitalWrite(ledPin, ledState);
    
    // Petit délai anti-rebond
    delay(50);
  }
  
  // Mettre à jour l'état du dernier bouton
  lastButtonState = currentButtonState;

  // Lecture de la valeur du potentiomètre avec diagnostic
  potValue = analogRead(potPin);
  
  // Debug : afficher la valeur du potentiomètre dans le moniteur série
  Serial.print("Valeur du potentiomètre : ");
  Serial.println(potValue);

  // Lecture de la distance avec le capteur SRF02
  distance = readSRF02Distance();
}

int readSRF02Distance() {
  // Commande pour lire la distance (démarrer une mesure et lire le résultat)
  Wire.beginTransmission(srf02Address);
  Wire.write(0x00);  // Registre de commande
  Wire.write(0x51);  // Commande de mesure de distance en centimètres
  Wire.endTransmission();

  // Petit délai pour la mesure
  delay(70);

  // Lire les données de distance
  Wire.beginTransmission(srf02Address);
  Wire.write(0x02);  // Registre des données de distance haute
  Wire.endTransmission();

  // Demander 2 octets (distance sur 16 bits)
  Wire.requestFrom(srf02Address, 2);

  if (Wire.available() >= 2) {
    int highByte = Wire.read();
    int lowByte = Wire.read();
    return (highByte << 8) | lowByte;
  }
  
  return 0;
}

void handleRoot() {
  String html = R"(
<!DOCTYPE html>
<html>
<head>
  <title>Capteurs ESP32</title>
  <meta charset='UTF-8'>
  <style>
    body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
    .sensor-data { background: #f4f4f4; padding: 10px; margin: 10px 0; border-radius: 5px; }
    .button { background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; display: inline-block; margin: 10px 0; }
  </style>
</head>
<body>
  <h1>Tableau de Bord des Capteurs ESP32</h1>
  <div id='sensorData' class='sensor-data'>
    <p>Chargement des données...</p>
  </div>
  <a href='/toggle-led' class='button'>Basculer LED</a>
  <script>
    function updateSensorData() {
      fetch('/sensor-data')
        .then(response => response.json())
        .then(data => {
          document.getElementById('sensorData').innerHTML = `
            <h2>Données en temps réel :</h2>
            <p>État du bouton : ${data.buttonState ? 'Relâché' : 'Appuyé'}</p>
            <p>État de la LED : ${data.ledState ? 'Allumée' : 'Éteinte'}</p>
            <p>Valeur du potentiomètre : ${data.potValue}</p>
            <p>Distance du capteur SRF02 : ${data.distance} cm</p>
          `;
        });
    }
    
    // Mettre à jour les données toutes les secondes
    setInterval(updateSensorData, 1000);
    updateSensorData();
  </script>
</body>
</html>
  )";
  
  server.send(200, "text/html", html);
}

void handleToggleLED() {
  // Basculer l'état de la LED
  ledState = !ledState;
  digitalWrite(ledPin, ledState);
  
  // Rediriger vers la page principale
  server.sendHeader("Location", "/");
  server.send(303);
}

void handleSensorData() {
  // Créer un objet JSON avec les données des capteurs
  String jsonResponse = "{";
  jsonResponse += "\"buttonState\":" + String(digitalRead(buttonPin));
  jsonResponse += ",\"ledState\":" + String(ledState);
  jsonResponse += ",\"potValue\":" + String(potValue);
  jsonResponse += ",\"distance\":" + String(distance);
  jsonResponse += "}";
  
  server.send(200, "application/json", jsonResponse);
}
